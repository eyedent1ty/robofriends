{"version":3,"sources":["reportWebVitals.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/ColorPicker.js","containers/App.js","index.js"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","Card","id","name","email","className","alt","src","CardList","robots","map","robot","SearchBox","searchChange","type","placeholder","onChange","ColorPicker","inputChange","currentColor","color1","color2","onInput","value","App","state","searchField","onSearchChange","event","setState","target","onInputChange","attributes","fetch","response","json","users","this","filteredRobots","filter","toLowerCase","includes","gradientBackground","document","querySelector","style","background","length","Component","ReactDOM","render","StrictMode","getElementById"],"mappings":"gMAYeA,G,YAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,mCCOCQ,EAZF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,GAAIC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MACxB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,gCACE,6BAAKC,IACL,4BAAIC,WCiBGI,EAtBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAClB,OACE,8BAGIA,EAAOC,KAAI,SAACC,GAEV,IAAOT,EAAmBS,EAAnBT,GAAIC,EAAeQ,EAAfR,KAAMC,EAASO,EAATP,MACjB,OACE,cAAC,EAAD,CAEEF,GAAIA,EACJC,KAAMA,EACNC,MAAOA,GAHFF,SCEJU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACnB,OACE,qBAAKR,UAAU,MAAf,SACE,uBACEA,UAAU,oCACVS,KAAK,SACLC,YAAY,cACZC,SAAUH,OCIHI,EAXK,SAAC,GAAmD,IAAjDC,EAAgD,EAAhDA,YAAaC,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,OAAQC,EAAa,EAAbA,OACxD,OACE,gCACE,uBAAOnB,GAAG,SAASY,KAAK,QAAQQ,QAASJ,EAAaK,MAAOH,IAC7D,uBAAOlB,GAAG,SAASY,KAAK,QAAQQ,QAASJ,EAAaK,MAAOF,IAC7D,+CACA,4BAAIF,QCFJK,G,kNAEJC,MAAQ,CACNhB,OAAQ,GACRiB,YAAa,GACbN,OAAQ,UACRC,OAAQ,W,EAUVM,eAAiB,SAACC,GAEhB,EAAKC,SAAS,CAAEH,YAAaE,EAAME,OAAOP,S,EAG5CQ,cAAgB,SAACH,GAEL,WADQA,EAAME,OAAOE,WAAW9B,GAAlCqB,MAEN,EAAKM,SAAS,CAAET,OAAQQ,EAAME,OAAOP,QACnC,EAAKM,SAAS,CAAER,OAAQO,EAAME,OAAOP,S,uDAf3C,WAAoB,IAAD,OACjBU,MAAM,8CACHtC,MAAK,SAAAuC,GAAQ,OAAIA,EAASC,UAC1BxC,MAAK,SAAAyC,GAAK,OAAI,EAAKP,SAAS,CAAEpB,OAAQ2B,S,oBAgB3C,WACE,MAA8CC,KAAKZ,MAA5ChB,EAAP,EAAOA,OAAQiB,EAAf,EAAeA,YAAaN,EAA5B,EAA4BA,OAAQC,EAApC,EAAoCA,OAC9BiB,EAAiB7B,EAAO8B,QAAO,SAAA5B,GAAK,OAAIA,EAAMR,KAAKqC,cAAcC,SAASf,EAAYc,kBACtFE,EAAkB,oCAAgCtB,EAAhC,aAA2CC,EAA3C,KAGxB,OAFAsB,SAASC,cAAc,QAAQC,MAAMC,WAAaJ,EAEzCjC,EAAOsC,OAEb,sBAAK1C,UAAU,KAAf,UACC,oBAAIA,UAAU,KAAd,yBACA,cAAC,EAAD,CACEa,YAAamB,KAAKN,cAClBZ,aAAcuB,EACdtB,OAAQiB,KAAKZ,MAAML,OACnBC,OAAQgB,KAAKZ,MAAMJ,SAErB,cAAC,EAAD,CAAWR,aAAcwB,KAAKV,iBAC9B,cAAC,EAAD,CAAUlB,OAAQ6B,OAVpB,6C,GApCYU,cAmDHxB,ICjDfyB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFR,SAASS,eAAe,SAM1B5D,M","file":"static/js/main.383ffafc.chunk.js","sourcesContent":["const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\n\r\nconst Card = ({ id, name, email }) => {\r\n  return (\r\n    <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n      <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}></img>\r\n      <div>\r\n        <h2>{name}</h2>\r\n        <p>{email}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;","import React from  'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n  return (\r\n    <div>\r\n      {\r\n        // You can able to render all of the items in the list\r\n        robots.map((robot) => {\r\n          // destructuring\r\n          const {id, name, email} = robot;\r\n          return (\r\n            <Card \r\n              key={id}\r\n              id={id} \r\n              name={name} \r\n              email={email} \r\n            />\r\n          );\r\n        })  \r\n      }\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({ searchChange }) => {\r\n  return(\r\n    <div className=\"pa2\">\r\n      <input \r\n        className=\"pa3 ba ba--green bg-lightest-blue\" \r\n        type=\"search\" \r\n        placeholder=\"search user\"\r\n        onChange={searchChange}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst ColorPicker = ({ inputChange, currentColor, color1, color2 }) => {\r\n  return(\r\n    <div>\r\n      <input id=\"color1\" type=\"color\" onInput={inputChange} value={color1}/>\r\n      <input id=\"color2\" type=\"color\" onInput={inputChange} value={color2}/>\r\n      <h5>Current Color</h5>\r\n      <p>{currentColor}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ColorPicker;","import React, { Component } from 'react';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ColorPicker from '../components/ColorPicker';\r\nimport './App.css';\r\n\r\nclass App extends Component{\r\n\r\n  state = {\r\n    robots: [],\r\n    searchField: '',\r\n    color1: '#000000',\r\n    color2: '#ffffff',\r\n  }\r\n\r\n  // Lifecycle methods (mounting)\r\n  componentDidMount(){\r\n    fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users => this.setState({ robots: users }));\r\n  }\r\n\r\n  onSearchChange = (event) => {\r\n    // Changing the state\r\n    this.setState({ searchField: event.target.value });\r\n  };\r\n\r\n  onInputChange = (event) => {\r\n    const { value } = event.target.attributes.id;\r\n    value === 'color1' ?\r\n      this.setState({ color1: event.target.value })\r\n      : this.setState({ color2: event.target.value });\r\n\r\n  };\r\n\r\n  render() {\r\n    const {robots, searchField, color1, color2} = this.state;\r\n    const filteredRobots = robots.filter(robot => robot.name.toLowerCase().includes(searchField.toLowerCase()));\r\n    const gradientBackground = `linear-gradient(to right, ${color1}, ${color2})`\r\n    document.querySelector('body').style.background = gradientBackground;\r\n\r\n    return (!robots.length) ?\r\n      <h1>Loading</h1>\r\n      :<div className=\"tc\">\r\n        <h1 className=\"f1\">RoboFriends</h1>\r\n        <ColorPicker \r\n          inputChange={this.onInputChange} \r\n          currentColor={gradientBackground} \r\n          color1={this.state.color1} \r\n          color2={this.state.color2}\r\n        />\r\n        <SearchBox searchChange={this.onSearchChange} />\r\n        <CardList robots={filteredRobots} />\r\n      </div>\r\n  }\r\n}\r\n\r\nexport default App; ","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport 'tachyons';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport App from './containers/App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}